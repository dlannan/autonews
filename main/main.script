
local function webview_callback(self, webview_id, request_id, type, data)
    if type == webview.CALLBACK_RESULT_URL_OK then
        print("CALLBACK_RESULT_URL_OK")

    elseif type == webview.CALLBACK_RESULT_URL_ERROR then
        print("CALLBACK_RESULT_URL_ERROR")
        print("Failed to load url: " .. tostring(data["url"]))
        print("Error: " .. tostring(data["error"]))

    elseif type == webview.CALLBACK_RESULT_URL_LOADING then
        print("CALLBACK_RESULT_URL_LOADING")
        -- a page is loading
        -- return false to prevent it from loading
        -- return true or nil to continue loading the page
        return true

    elseif type == webview.CALLBACK_RESULT_EVAL_OK then
        print("CALLBACK_RESULT_EVAL_OK")
        print("Eval ok. Result: " .. tostring(data['result']))

    elseif type == webview.CALLBACK_RESULT_EVAL_ERROR then
        print("CALLBACK_RESULT_EVAL_ERROR")
        print("Eval not ok. Request # " .. tostring(request_id))

    else
        print("Unknown callback type: " .. tostring(type))
    end
end

local function webview_available()
    if not webview then
        print("WebView is not available (only available on iOS and Android).")
        return false
    end
    return true
end

local function custom_resources_available( res_id )
    if not res_id then
        print("Unable to load custom resources.")
        return false
    end 
    return true 
end

local function window_callback(self, event, data)
    if event == window.WINDOW_EVENT_RESIZED then

    end
end

function loadJSscript( filename )
    local text = sys.load_resource(filename)
    return "<script>"..text.."</script>"
end

function loadCSSscript( filename )
    local text = sys.load_resource(filename)
    return "<style>"..text.."</style>" 
end

function init(self)

    msg.post(".", "acquire_input_focus")
    msg.post("@render:", "use_camera_projection")
    msg.post("camera", "acquire_camera_focus")    
    msg.post("@render:", "clear_color", { color = vmath.vector4(1,1,1,0) })

    -- tint the cube and the sphere
    go.set("/models#cube", "tint", vmath.vector4(1,1,1,1))
    go.set("/models#sphere", "tint", vmath.vector4(1,1,1,1))
    
    self.feedback_html = sys.load_resource("/custom_resources/tableview.html")
    if not custom_resources_available(self.feedback_html) then return end

    local headerstart = [[
    <html class=" js no-touch cssanimations csstransitions" lang="en" style="">
    <head>
    <meta charset="utf-8">
    <title>Project â€“ Scenarist</title>
    <meta name="description" content="Describe your website here.">
    <meta name="generator" content="GravCMS">
    ]]
    local headerend = "</head>"
    
    local header = headerstart..loadJSscript("/custom_resources/jquery-2.1.0.min.js").."\n"
    header = header..loadCSSscript("/custom_resources/bootstrap.min.css").."\n"
    header = header..loadCSSscript("/custom_resources/bootstrap-table.min.css").."\n"
    header = header..loadJSscript("/custom_resources/bootstrap.min.js").."\n"
    header = header..loadJSscript("/custom_resources/bootstrap-table.min.js").."\n"
    header = header..loadCSSscript("/custom_resources/all.css").."\n"
    header = header..headerend
    
    self.feedback_html = header..self.feedback_html
        
    if not webview_available() then return end
    self.webview_id = webview.create(1, webview_callback)
    local width, height = window.get_size()
    pprint(win)
    webview.set_position(self.webview_id, 0, 0, width,height)
    webview.open_raw(self.webview_id, self.feedback_html)
    --webview.open(self.webview_id, "https://google.com")
    window.set_listener(window_callback)

    self.angle = 0.0
end

function update(self, dt)
    self.angle = self.angle + 0.5 * dt 
    rot_anglez = vmath.quat_rotation_z(self.angle);
    rot_angley = vmath.quat_rotation_y(self.angle);

    go.set_rotation(rot_anglez, "/models#sphere")
    go.set_rotation(rot_angley, "/models#cube")
    if self.angle > math.pi * 2.0 then self.angle = self.angle - math.pi * 2.0 end
        
    webview.poll(self.webview_id);
end

function on_input(self, action_id, action)
end

require("main.util-utf8")
local lustache = require "main.lustache"

local ffi = package.preload.ffi()  -- In Defold this is a little different. Normaly you use: local ffi = require("ffi")
-- Define the methods you want to use (these are OS methods)
ffi.cdef[[
void Sleep( uint32_t tm );
]]

local vid_thumb = { w=455, h=256 }
local num_fetch = 10

local agents = {
    "Mozilla/5.0 (Linux; Android 13; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36",
    "Mozilla/5.0 (Linux; Android 13; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36",
    "Mozilla/5.0 (Linux; Android 12; moto g stylus 5G) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36v",
    "Mozilla/5.0 (Linux; Android 12; Redmi Note 9 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36",
    "Mozilla/5.0 (Linux; Android 10; MAR-LX1A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36",
    "Mozilla/5.0 (Linux; Android 12; M2102J20SG) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36",
    "Mozilla/5.0 (Linux; Android 12; DE2118) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36",
    "Mozilla/5.0 (iPhone13,2; U; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Mobile/15E148 Safari/602.1",
    "Mozilla/5.0 (iPhone12,1; U; CPU iPhone OS 13_0 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Mobile/15E148 Safari/602.1",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) FxiOS/13.2b11866 Mobile/16A366 Safari/605.1.15",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1",
    "Mozilla/5.0 (iPhone9,3; U; CPU iPhone OS 10_0_1 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Mobile/14A403 Safari/602.1",
    "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; RM-1127_16056) AppleWebKit/537.36(KHTML, like Gecko) Chrome/42.0.2311.135 Mobile Safari/537.36 Edge/12.10536",
    "Mozilla/5.0 (Linux; Android 12; SM-X906C Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.119 Mobile Safari/537.36",
    "Mozilla/5.0 (Linux; Android 7.0; Pixel C Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/52.0.2743.98 Safari/537.36",
    "Mozilla/5.0 (Linux; Android 6.0.1; SGP771 Build/32.2.A.0.253; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/52.0.2743.98 Safari/537.36",
    "Mozilla/5.0 (Linux; Android 5.0.2; LG-V410/V41020c Build/LRX22G) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/34.0.1847.118 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246",
    "Mozilla/5.0 (X11; CrOS x86_64 8172.45.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.64 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9",
    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36",
    "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:15.0) Gecko/20100101 Firefox/15.0.1",
}

local cookie = [[
VISITOR_INFO1_LIVE=56vzBnuVFPc; PREF=tz=Australia.Adelaide&f6=40000000; HSID=AacP_BEoJvECM3gVl; SSID=AEC6gWS9dhKEX2eXb; APISID=h2HeNgH_NUof7D1D/A-Sxjk5aaGBxBSOpb; SAPISID=22geGjB5nB9KPiXJ/AGBbV6XP0FQ2JGVQM; __Secure-1PAPISID=22geGjB5nB9KPiXJ/AGBbV6XP0FQ2JGVQM; __Secure-3PAPISID=22geGjB5nB9KPiXJ/AGBbV6XP0FQ2JGVQM; LOGIN_INFO=AFmmF2swRQIgNSHic5LZrIZuIBfjR6axJteorFsBcUM0CFpKG457GxACIQDQwHJwulqsR05ZwEkKWJmp-N0rBg6oOJ0TVgVYsY4s7A:QUQ3MjNmeDRtUTY2WHNQaUxNZVRaRDJKNFRrZTBydk9PUS1WRFpoWXNheHpFOWQ0dHMxUjZRdDkwd2M3VjdrQjRzVGJNa1cxQmkxTVhYZWFLbUNVWFhpX01GMm43bkdyZXh3aTE3TkZhQzBQOUVwb3pxNVFqZ2xuTUJ4VjVXSTJMSmxkZHFLMWZydnZFNkU3N3kyTkl4amF1SGVISjQ0S2JB; YSC=5N6HI81eSEw; VISITOR_PRIVACY_METADATA=CgJBVRICGgA%3D; NID=511=TwMNh54c9p5S0iJB7nwYKMIDTZCdmAbiGyopoTEh8bg0dzze0yB9nXnAfcRselkp4etUeyqphy33IJG5aKg51cA15pN-uPsfFvbf4NAEXF3HRu2-mr1XqPzJLZsudYQO91PBumyfXD3lRC06xlcMuDcyxT1079PwSQUaCPM19-_4QgBGxY8oTa6wSzgQTdm9tlNSnDgLI9mE; OTZ=7191363_18_14_133470_18_395550; SID=agjNVUMr-IG492DKzmZQFCY5wtEfcBWNDNNlkEfQu0MawqqJ6bTmmZr3hQZODtI1SSh5yA.; __Secure-1PSID=agjNVUMr-IG492DKzmZQFCY5wtEfcBWNDNNlkEfQu0MawqqJnFQIAbxoMRZ4AC77rbBR3w.; __Secure-3PSID=agjNVUMr-IG492DKzmZQFCY5wtEfcBWNDNNlkEfQu0MawqqJs8YZ26q5lH0LTW6pQ3zf-Q.; wide=1; __Secure-1PSIDTS=sidts-CjIB3e41hef64_ToVP_y-ozf_-MYGyEhQ5E5Kp0dIcZkSbj7R2e3QRL2wIQiKECQBMUerBAA; __Secure-3PSIDTS=sidts-CjIB3e41hef64_ToVP_y-ozf_-MYGyEhQ5E5Kp0dIcZkSbj7R2e3QRL2wIQiKECQBMUerBAA; SIDCC=APoG2W966KXYRhA0kJnAe6PoHB7W3vWshe38wK6JXsDIYwT3QeSzyzdg8GGQrjZKqJBF4Ndt2g; __Secure-1PSIDCC=APoG2W8eylP8SiuxDjPMrTjigwYlx3N6q5s5LVhSk8uo33MTZT1lT_LW3QpqxrTIDEJjXPKEZVk; __Secure-3PSIDCC=APoG2W8_t0EdxOlMIuZMLkFF6lDVwfL_1i86-qFYw9QAIaw3nfqZc8_4NRO8S2ucjWqmL2lU9QU
]]


local headers = {
    ["User-Agent"] = "Mozilla/5.0 (MSIE; Windows 10)",
    -- ["Accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application",
    -- ["Accept-Encoding"] = "gzip, deflate, br",
    -- ["Accept-Languages"] = "en-US,en;q=0.9",
    -- ["Cache-Controls"] = "max-age=0",
    -- ["Upgrade-Insecure-Requests"] = 1,
    --["Cookie"] = cookie,
}   
-- Add this as 6th param to write to file
local options = {
    ["path"] = "res.html"
} 

local main_page_model = {
    rows = {},
}     

local function dump_page(self, doc, filename)

    local fh = io.open(filename, "w")
    if(fh) then 
        fh:write(doc)
        fh:close()
    end
end

local function load_page(self, filename)

    local doc = ""
    local fh = io.open(filename, "r")
    if(fh) then 
        doc = fh:read("*a")
        fh:close()
    end    
    return doc
end

function loadJSscript( filename )
    local text = sys.load_resource(filename)
    return "<script>"..tostring(text).."</script>"
end

function loadCSSscript( filename )
    local text = sys.load_resource(filename)
    return "<style>"..tostring(text).."</style>" 
end

   
local function init_main_page(self)
    self.main_page_ready = nil
    self.rows_done = 0
    local html_data = {
        css_easygrid = loadCSSscript("/assets/html/css/easygrid.css"),
        css_boostrap = loadCSSscript("/assets/html/css/bootstrap.min.css"),
        js_easygrid = loadJSscript("/assets/html/js/easygrid.js"),
        js_app = loadJSscript("/assets/html/js/app.js"),
        rows = main_page_model.rows,
    }
    local main_page = load_page(self, "assets/html/main_page.html")
    self.main_page = lustache:render(main_page, html_data)
    self.main_page_ready = true
end

local function video_html(self, vid_id)
    local html = [[<div class="video-player"><iframe width="]]..vid_thumb.w..[[" height="]]..vid_thumb.h..[[" id="iframe" src="https://www.youtube.com/embed/]]..vid_id..[[" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div>]]
    return html
end

local function process_data(self, data, row)
    
    local search_text = [[<div aria%-level="3" role="heading"[^>]+.?(.-)</div>]]
    local search_link = [[<a class="[^"]+.? role="presentation" href="([^"]+)(.-)</a>]]
    local check_video = [[youtube.com/watch%?v=([^"]+)]]
    
    local newdata = ""
    for w, v in string.gmatch(data, search_link) do
        local m = string.match(v, search_text)
        local vid = string.match(w, check_video)
        rowdata = {}
        if(m) then m = string.gsub(m, "'", "") end
        if vid then 
            rowdata.text = m
            rowdata.data = video_html(self, vid)
        else
            rowdata.text = m
            rowdata.data = [[<a href="]]..w..[[ class="btn btn-primary">]]..m..[[</a>]]
        end
        table.insert(main_page_model.rows, rowdata)
    end
end    

local function search_google_request(self, search)
    local search_google = 'https://www.google.com/search?q='..search..[[&num=]]..num_fetch..[[&as_qdr=w]]
    headers["Origin"] =  "https://www.google.com"    
    return search_google
end

local function search_youtube_request(self, search)
    -- local search_youtube = [[--request POST --url 'https://www.youtube.com/youtubei/v1/player?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8' ]]
    -- search_youtube = search_youtube..[[--header 'Content-Type: application/json' ]]
    -- search_youtube = search_youtube..[[--header 'Origin: https://www.youtube.com' ]]
    -- search_youtube = search_youtube..[[--header 'X-YouTube-Client-Name: 3' ]]
    -- search_youtube = search_youtube..[[--header 'X-YouTube-Client-Version: 16.20' ]]
    -- search_youtube = search_youtube..[[--data '{ "context": {"client": {]]
    -- search_youtube = search_youtube..[["clientName": "ANDROID","clientVersion": "16.20","hl": "en"]]
    -- search_youtube = search_youtube..[[}}, "videoId": "dQw4w9WgXcQ",}']]
    
    -- local search_youtube = 'https://www.youtube.com/results?search_query='..search
    -- local search_youtube = "https://www.youtube.com/results?app=desktop&search_query="..search
    local search_youtube = 'https://www.google.com/search?q='..search..[[&num=]]..num_fetch..[[&as_qdr=w&as_sitesearch=youtube.com]]
    headers["Origin"] =  "https://www.google.com"
    --headers["X-YouTube-Client-Name"] = "3"
    --headers["X-YouTube-Client-Version"] = "16.20"
    return search_youtube
end

local function handle_response(self, id, response)
    
    if response.status == 302 then  
        self.redirect_url = response.headers.location
    else 
        process_data(self, response.response, self.row_id)
        dump_page(self, response.response, "assets/response.html")        
        self.main_page_ready = true
    end
end

local function search_request(self, search, row)

    self.result = nil
    self.row_id = row
    
    local search_type = search_youtube_request(self, search)
    --local search_type = search_google_request(self, search)
    http.request(search_type, "GET", handle_response, headers) -- options)
end


local function webview_callback(self, webview_id, request_id, type, data)
    if type == webview.CALLBACK_RESULT_URL_OK then
        print("CALLBACK_RESULT_URL_OK")

    elseif type == webview.CALLBACK_RESULT_URL_ERROR then
        print("CALLBACK_RESULT_URL_ERROR")
        print("Failed to load url: " .. tostring(data["url"]))
        print("Error: " .. tostring(data["error"]))

    elseif type == webview.CALLBACK_RESULT_URL_LOADING then
        print("CALLBACK_RESULT_URL_LOADING")
        -- a page is loading
        -- return false to prevent it from loading
        -- return true or nil to continue loading the page
        return true

    elseif type == webview.CALLBACK_RESULT_EVAL_OK then
        print("CALLBACK_RESULT_EVAL_OK")
        print("Eval ok. Result: " .. tostring(data['result']))

    elseif type == webview.CALLBACK_RESULT_EVAL_ERROR then
        print("CALLBACK_RESULT_EVAL_ERROR")
        print("Eval not ok. Request # " .. tostring(request_id))

    else
        print("Unknown callback type: " .. tostring(type))
    end
end

local function webview_available()
    if not webview then
        print("WebView is not available (only available on iOS and Android).")
        return false
    end
    return true
end

local function custom_resources_available( res_id )
    if not res_id then
        print("Unable to load custom resources.")
        return false
    end 
    return true 
end

local function window_callback(self, event, data)
    if event == window.WINDOW_EVENT_RESIZED then
        local width, height = window.get_size()
        webview.set_position(self.webview_id, -1, -1, width, height)
    end
end

function init(self)

    msg.post(".", "acquire_input_focus")
    msg.post("@render:", "use_camera_projection")
    msg.post("camera", "acquire_camera_focus")    
    msg.post("@render:", "clear_color", { color = vmath.vector4(1,1,1,0) })

    -- tint the cube and the sphere
    go.set("/models#cube", "tint", vmath.vector4(1,1,1,1))
    go.set("/models#sphere", "tint", vmath.vector4(1,1,1,1))
    
    self.feedback_html = sys.load_resource("/custom_resources/tableview.html")
    if not custom_resources_available(self.feedback_html) then return end

    local headerstart = [[
    <html class=" js no-touch cssanimations csstransitions" lang="en" style="">
    <head>
    <meta charset="utf-8">
    <title>Project – Scenarist</title>
    <meta name="description" content="Describe your website here.">
    <meta name="generator" content="GravCMS">
    ]]
    local headerend = "</head>"
    
    local header = headerstart..loadJSscript("/custom_resources/jquery-2.1.0.min.js").."\n"
    header = header..loadCSSscript("/custom_resources/bootstrap.min.css").."\n"
    header = header..loadCSSscript("/custom_resources/bootstrap-table.min.css").."\n"
    header = header..loadJSscript("/custom_resources/bootstrap.min.js").."\n"
    header = header..loadJSscript("/custom_resources/bootstrap-table.min.js").."\n"
    header = header..loadCSSscript("/custom_resources/all.css").."\n"
    header = header..headerend
    
    self.feedback_html = header..self.feedback_html
        
    if not webview_available() then return end
    self.webview_id = webview.create(1, webview_callback)
    local width, height = window.get_size()
    webview.set_position(self.webview_id, 0, 0, width,height)
    --webview.open_raw(self.webview_id, self.feedback_html)
    -- webview.open(self.webview_id, "file://D:/dev/defold/repos/autonews/assets/html/index.html")
    --webview.open(self.webview_id, "https://youtube.com")
    window.set_listener(window_callback)
    webview.add_filehandling(self.webview_id)
    --webview.set_background_color(self.webview_id, 0xffffff)

    search_request(self, "europe%20news", "row-1")
    -- ffi.C.Sleep(math.random(1,10) * 500)
    -- search_request(self, "aus%20news", "row-2")
    -- ffi.C.Sleep(math.random(1,10) * 500)
    -- search_request(self, "europe%20news", "row-3")
    -- dump_page(self, self.main_page)
    self.angle = 0.0
end

function update(self, dt)
    self.angle = self.angle + 0.5 * dt 
    rot_anglez = vmath.quat_rotation_z(self.angle);
    rot_angley = vmath.quat_rotation_y(self.angle);

    go.set_rotation(rot_anglez, "/models#sphere")
    go.set_rotation(rot_angley, "/models#cube")
    if self.angle > math.pi * 2.0 then self.angle = self.angle - math.pi * 2.0 end
   
    if self.main_page_ready then 
        init_main_page(self)
        self.main_page = lustache:render(self.main_page, main_page_model)
        dump_page(self, self.main_page, "assets/main_page.html")
        webview.open_raw(self.webview_id, self.main_page)
        
        main_page_model.rows = {}
        self.main_page_ready = nil 
    end

    if self.redirect_url then 
        pprint("[LOCATION] "..self.redirect_url)
        http.request(self.redirect_url, "GET", handle_response, headers)
        self.redirect_url = nil
    end
end

function on_input(self, action_id, action)
end
